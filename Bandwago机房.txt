EU: Amsterdam, Netherlands [EUNL_3]               104.224.146.54
C:\Users\mokoc>ping 104.224.146.54

正在 Ping 104.224.146.54 具有 32 字节的数据:
请求超时。
来自 104.224.146.54 的回复: 字节=32 时间=401ms TTL=50
来自 104.224.146.54 的回复: 字节=32 时间=418ms TTL=51
来自 104.224.146.54 的回复: 字节=32 时间=437ms TTL=50

104.224.146.54 的 Ping 统计信息:
    数据包: 已发送 = 4，已接收 = 3，丢失 = 1 (25% 丢失)，
往返行程的估计时间(以毫秒为单位):
    最短 = 401ms，最长 = 437ms，平均 = 418ms
CA: British Columbia, Vancouver [CABC_1]          69.171.75.119 

US: New York [USNY_2]                             104.224.142.200

US: Fremont, California [USCA_FMT]                23.83.230.198  

US: Los Angeles, California (DC4 MCOM) [USCA_4]   98.142.140.178
C:\Users\mokoc>ping 98.142.140.178

正在 Ping 98.142.140.178 具有 32 字节的数据:
来自 98.142.140.178 的回复: 字节=32 时间=203ms TTL=46
来自 98.142.140.178 的回复: 字节=32 时间=287ms TTL=46
来自 98.142.140.178 的回复: 字节=32 时间=172ms TTL=45
来自 98.142.140.178 的回复: 字节=32 时间=208ms TTL=45

98.142.140.178 的 Ping 统计信息:
    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，
往返行程的估计时间(以毫秒为单位):
    最短 = 172ms，最长 = 287ms，平均 = 217ms

US: Los Angeles, California (DC2 QNET) [USCA_2]   45.78.61.104
C:\Users\mokoc>ping 45.78.61.104

正在 Ping 45.78.61.104 具有 32 字节的数据:
来自 45.78.61.104 的回复: 字节=32 时间=221ms TTL=48
来自 45.78.61.104 的回复: 字节=32 时间=271ms TTL=47
来自 45.78.61.104 的回复: 字节=32 时间=285ms TTL=46
来自 45.78.61.104 的回复: 字节=32 时间=217ms TTL=48

45.78.61.104 的 Ping 统计信息:
    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，
往返行程的估计时间(以毫秒为单位):
    最短 = 217ms，最长 = 285ms，平均 = 248ms

US: Los Angeles, California (DC8 CN2) [USCA_8]  172.96.239.13
C:\Users\mokoc>ping 172.96.239.13
正在 Ping 172.96.239.13 具有 32 字节的数据:
来自 172.96.239.13 的回复: 字节=32 时间=167ms TTL=46
来自 172.96.239.13 的回复: 字节=32 时间=172ms TTL=46
来自 172.96.239.13 的回复: 字节=32 时间=167ms TTL=47
来自 172.96.239.13 的回复: 字节=32 时间=172ms TTL=46

172.96.239.13 的 Ping 统计信息:
    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，
往返行程的估计时间(以毫秒为单位):
    最短 = 167ms，最长 = 172ms，平均 = 169ms

US: Los Angeles, California (DC3 CN2) [USCA_3]     104.194.80.186
C:\Users\mokoc>ping 104.194.80.186

正在 Ping 104.194.80.186 具有 32 字节的数据:
来自 104.194.80.186 的回复: 字节=32 时间=218ms TTL=49
来自 104.194.80.186 的回复: 字节=32 时间=232ms TTL=48
来自 104.194.80.186 的回复: 字节=32 时间=247ms TTL=48
来自 104.194.80.186 的回复: 字节=32 时间=259ms TTL=47

104.194.80.186 的 Ping 统计信息:
    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，
往返行程的估计时间(以毫秒为单位):
    最短 = 218ms，最长 = 259ms，平均 = 239ms
172.96.239.13
26264
root
Ax2IV3cQUnCU
23.83.232.169 

oga7J3BcqVXR

26264


yum install wget -y                                                      1

wget --no-check-certificate -O shadowsocksR.sh https://git.io/vHRHi      2

chmod +x shadowsocksR.sh                                                 3

./shadowsocksR.sh 2>&1 | tee shadowsocksR.log                            4

ulimit优化
输入下面的命令并回车。（加大ulimit数值并加入开机启动）

ulimit -n 51200 && echo ulimit -n 51200 >> /etc/rc.local                 5

limits优化
输入下面的命令并回车，一条一条来。

echo "* soft nofile 51200" >> /etc/security/limits.conf                  6

echo "* hard nofile 51200" >> /etc/security/limits.conf                  7


sysctl优化
输入vi /etc/sysctl.conf回车
之后按 i 键或者按 Insert 键开始修改
在后面增加：
                                                                         8
fs.file-max = 51200

net.core.rmem_max = 67108864
net.core.wmem_max = 67108864
net.core.netdev_max_backlog = 250000
net.core.somaxconn = 4096

net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_tw_recycle = 0
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_keepalive_time = 1200
net.ipv4.ip_local_port_range = 10000 65000
net.ipv4.tcp_max_syn_backlog = 8192
net.ipv4.tcp_max_tw_buckets = 5000
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_rmem = 4096 87380 67108864
net.ipv4.tcp_wmem = 4096 65536 67108864
net.ipv4.tcp_mtu_probing = 1
修改结束之后按一下 ESC 键输入 :wq 再按一下回车，保存退出，如下图片所示。
说明一下，如果你修改错了，想要重新来过，按一下 ESC 键输入 :q! ，再按一下回车，就会退出了。
再说明一下:wq，这个是一个冒号和wq，冒号啊，也就是键盘上 L 键右边那个键，务必为英语输入状态下

再然后输入：sysctl -p回车                                              9

ShadowsocksR如何修改端口和密码
输入vi /etc/shadowsocks.json回车，之后按 i 键或者按 Insert 键开始修改，下面是配置示范

{
    "server":"0.0.0.0",
    "server_ipv6":"::",
    "server_port":6666,
    "local_address":"127.0.0.1",
    "local_port":1080,
    "password":"hello",
    "timeout":120,
    "method":"chacha20-ietf",
    "protocol":"auth_aes128_md5",
    "protocol_param":"",
    "obfs":"tls1.2_ticket_auth",
    "obfs_param":"",
    "redirect":"",
    "dns_ipv6":false,
    "fast_open":false,
    "workers":1
}

如上面的配置，端口是6666，密码是hello。
修改端口就是更改server_port的值。
修改密码就是更改password的值。
修改结束之后按一下 ESC 键输入 :wq 再按一下回车，保存退出
之后输入：/etc/init.d/shadowsocks restart回车

ShadowsocksR如何开启多用户
输入vi /etc/shadowsocks.json回车，之后按 i 键或者按 Insert 键开始修改，下面是配置示范。

{
    "server":"0.0.0.0",
    "server_ipv6":"::",
    "local_address":"127.0.0.1",
    "local_port":1080,
    "port_password":{
         "62911":"fashion911",
         "62520":"fashion520"
    },
    "timeout":120,
    "method":"chacha20-ietf",
    "protocol":"auth_aes128_sha1",
    "protocol_param":"",
    "obfs":"tls1.2_ticket_auth",
    "obfs_param":"",
    "redirect":"",
    "dns_ipv6":false,
    "fast_open":false,
    "workers":1
}
其实就是删除了server_port和password，之后增加一个port_password
写法就是 json 文件格式的写法。
如上面配置，开启了443端口密码是password0，开启了444端口密码是password1。
修改结束之后按一下 ESC 键输入 :wq 再按一下回车，保存退出
之后输入：/etc/init.d/shadowsocks restart回车

卸载
如果你需要卸载ShadowsocksR。
使用命令：./shadowsocksR.sh uninstall，然后输入 y 即可。

更新或重新安装
如果你需要更新Shadowsocks服务器端，或者需要重新安装Shadowsocks服务器端。
先卸载，使用命令：./shadowsocksR.sh uninstall，然后输入 y 即可。
之后输入命令：./shadowsocksR.sh 2>&1 | tee shadowsocksR.log

结束。



{
    "server":"0.0.0.0",
    "server_ipv6":"[::]",
    "server_port":62911,
    "local_address":"127.0.0.1",
    "local_port":1080,
    "password":"fashion911",
    "timeout":120,
    "method":"chacha20-ietf",
    "protocol":"auth_aes128_sha1",
    "protocol_param":"",
    "obfs":"tls1.2_ticket_auth",
    "obfs_param":"",
    "redirect":"",
    "dns_ipv6":false,
    "fast_open":false,
    "workers":1
}





















